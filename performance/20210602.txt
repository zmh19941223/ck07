# 20210602白板

+ 用户定义变量 vs 用户参数
  + **用户定义变量**
    + 全局变量：  可以跨线程组
    + 在启动时，获取一次值，在运行过程中不会动态获取值
  + **用户参数**
    + 局部变量： 不能**直接**跨线程组
    + 在启动时，获取一次值，在运行过程中，还会动态获取值
  + 作为功能测试、自动化测试，非性能测试时，可以把接口写在一个**线程组**下面
  + 在性能测试时，可能会因为不同的需求，把接口写到不同的**线程组**中
    + 在性能测试中，多线程组脚本，有个难题，跨线程组传参
    + 我们采用“**用户属性**”
    + 函数

+ 函数：
  + 查看，帮助、Random
  + jmeter中的函数： 可以被直接调用的方法
  + 使用函数的注意事项：要特别注意，**函数名称的大小写**

+ 重要的函数
  + ${__counter(,)} 计数器
    + 加1功能
    + 如果要 加2 ===计数器元件
      + 重点：最大值， 如果运行结果超过最大值时，又会从起始值开始循环
      + 每个用户独立计数器： 多线程时，每个用户都是从起始值开始计数
  + ${__dateTimeConvert(,,,)}   时间格式转换
  + ${__time(,)}  获取**当前时间戳函数**
    + 当前的时间
  + ${__timeShift(,,,,)}  数据格式化
  + ${__RandomDate(,,,,)}  随机日期
    + 不包括结束日期
  + ${__Random(,,)}
  + ${__RandomString(,,)}
  + ${__digest(,,,,)}  **加密**  简单加密
  + ${__intSum(,,)}  整数相加函数
  + 
  + ${__P(,)}   **获取属性函数**
  + ${__property(,,)}  **获取属性函数**
    + P 只是property这个函数的简写
  + ${__setProperty(,,)}   设置**属性函数**
    + 设置jmeter的动态属性
  + ${__V(,)}   **拼接**函数 

+ 属性： 以.properties结尾的文件，都是jmeter的属性配置文件
  + 属性是什么？是jmeter**工具自身**带有的标签。
  + jmeter工具属性：
    + jmeter属性：可能被改变
      + 静态属性： 写在properties文件中属性信息，都是静态属性
      + 动态属性：运行过程中，动态定义属性
    + 系统属性： os、jdk  ===这个系统属性信息，**是不可改变**
  + 属性  vs 参数 \ 变量  区别
    + 属性是jmeter工具具有，所有，jmeter中的线程组要使用属性，都可以使用
    + 参数、变量，有局限访问

+ 动态属性：一直存在？还是朝生夕死？
  + 动态属性，是在运行过程中产生的，关闭jmeter，就是自动释放了。
+ 顺序?
  + jmeter中，多个启用线程组，在执行时，**默认是并行执行**
  + 在**性能测试中**，我们**不会勾选**  测试计划中 “独立运行每个线程组”
    + 混合场景设计

======

${__V(,)}   **拼接**函数 
# 20210804白板

+ top、 mpstat

  + sys高 系统态cpu使用率高， 内核中计算
    + 程序进行计算，非内核态  进入 内核态，重点关注 上下文切换的数据
      + 自愿上下文切换， 资源不够用，所以要进行切换，===资源有关，===可能存在IO/内存资源
      + 非自愿上下文切换 -----强制进行资源切换 =====考虑cpu不够用
        + 解决：
          +  要么在服务器上，减少启动的程序
          + 要么增加cpu的数量

  + si 软中断高
  + us 用户态比较高 

+ 真正在做性能测试时，你要管理好你的被测服务器，loadaverage要恢复正常，第一个值，没有明显的上升或下降的趋势，也就是说第1个值，基本不变。
  + 要把服务器的资源监控弄起来，上课，用的grafana+prometheus + 硬件资源\应用资源
+ 服务器硬件资源监控： grafana(前端) + prometheus(时序数据库) + node_exporter(硬件资源收集器)
  + 被测服务器上 部署 node_exporter
    + node_exporter上传到被测服务器
    + 解压、启动   `./node_exporter`
    + 端口：9100
  + 监控平台机器上，启动 grafana + prometheus
    + 进入prometheus文件夹，修改Prometheus.yml的配置文件
    + 保存好配置文件，启动Prometheus  `./prometheus`    默认端口：9090
    + 启动grafana   `systemctl  restat grafana-server`  默认端口： 3000
    + http://grafanan_ip:3000  admin admin

+ stress-ng:  性能测试模拟工具，可以直接模拟服务器各种压力情况

  + stress-ng   我可以通过它，来模拟，你们企业中的响应有cpu相关性能问题
  + 安装

  ```shell
  # 安装epel源，更新系统
  yum install -y epel-release.noarch && yum -y update
  
  # 安装stess-ng 的工具
  yum install -y stress-ng
  
  ```

+ ## 进程上下文切换

```shell
(( proc_cnt = `nproc`*10 )); stress-ng --cpu $proc_cnt --pthread 1 --timeout 150
# nproc   这个命令可以获得服务器cpu的数量
# (( proc_cnt = `nproc`*10 ));   把cpu核的数量乘以10倍，给变量proc_cnt
# --cpu $proc_cnt  $proc_cnt shell编程中的变量引用
# --pthread  每个进程有多少个线程
# --timeout   超时时间，在命令执行多长时间之后自动结束
```

总结：

1、top命令，可以到 loadaverage 有持续上升，cpu被100%使用   us + sy + si

2 vmstat    proc中r列有非常大的数据  有非常多的进程在抢cpu的资源

​	memory: free 数据变小， 内存有一部分被使用

​	system： in有一点点， cs 有明显数据变大，说明有大量的 上下文切换

3 pidstat  -w 1----这个命令可以上下文的信息

​	我们看到的大量 stress-ng--cpu  cswch/s 自愿  nvcswch/s非自愿上下文的值

现在可以得出 ，我们线程有大量的 进程上下文切换问题，而这个问题的进程：stress-ng--cpu



当你的服务器，使用top命令发现，系统负载比较高，所有的cpu的使用率接近或等于 100%，我们要排查问题，vmstat 1 ， 结果我们看到有procs 中r列 有大量数据，说明我们有大量进程在竞争cpu的资源。--------可能服务器的cpu数量不够， 也可能是 进程启动的太多

vmstat  我们还看 system中 cs  比较高 --------肯定有大量的上下文切换

​	但是，此时，我并不知道，是哪个进程导致 抢占cpu，-----找具体是哪个进程

==== 应该是某个经常有大量的上下文切换，而导致的cpu使用率过高，系统负载过高的问题

---问题的关键点，找到具体的进程

pidstat -w 3      看到具体的 上下文切换的数据比较大的进程。-------**得到具体进程 和进程id**

+ 结论

  Ø1、top： load值一直在增加，而且增长的非常大

  Ø2、top：CPU的 us + sy ≈ 100%，us较高，sy较低

  Ø3、vmstat： procs的r 就绪队列长度，正在运行和等待的CPU进程数很大

  Ø4、vmstat： system的in(每秒中断次数) 和 cs(上下文切换次数) 都很大

  Ø5、vmstat：free、buff、cache变化不大

  Ø6、pidstat: nvcswch/s 非自愿上下文切换在逐步升高



只要系统运行，那么 中断和 上下文切换，就不可避免，只不过这些数据比较小



+ ## 线程上下文切换

```
stress-ng --cpu `nproc` --pthread 1024 --timeout 60
```

 +  分析命令： 
    	+  top
    	+  vmstat 1
    	+  pidstat -w 5



+ 结论：

Ø1、top： load值一直在增加，而且增长的非常大

Ø2、top：CPU的 us + sy ≈ 100%，us较低，**sy较高**

Ø3、vmstat： procs的**r 就绪队列**长度，正在运行和等待的CPU进程数很大

Ø4、vmstat： system的in(每秒中断次数) 和 **cs(上下文切换次数) 都很大**

Ø5、vmstat：free变小、buff基本不变、cache变大

Ø6、pidstat: cswch/s **自愿上下文切换** 升高
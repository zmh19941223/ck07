# 20210705白板

+ 回顾：
  + 面向目标场景
    + Arrivals Thread Group  可以面向tps
    + Concurrency Thread Group  可以设置面向多少并发用户数
  + 波浪型场景
    + Ultimate Thread Group  ===波浪型场景
    + 在添加第二行时，初始化时间点，要大于等于上一行的所有时间之和====才能设计出 波浪型场景
    + 阶梯线程组： stepping thread group线程组，负载测试场景
      + 这种线程组，只能设计出，stepping 是相同的情况
    + 想要设计，步长相同，或不相同的阶梯线程组，可以使用Ultimate Thread Group

问题： 我的脚本，期望在启动之后，运行一段时间，暂停，然后过一段时间之后，再运行？

1、jenkins中的定时任务   √   但是，这种方式，需要大家掌握Jenkins中定时任务的配置

2、Ultimate Thread Group  下一波浪的起始时间大于 前一个波浪的所有时间之和



普通性能场景====普通线程组

负载性能场景=====stepping thread group 阶梯线程组   Ultimate Thread Group

压力测试场景 ====时间比较长

面向目标  ======

终极线程组 =======Ultimate Thread Group 模拟有时间规律的场景

​	可以模拟出压力测试场景吗？





+ 新内容
+ 混合场景： **不同数量的并发用户数，向不同接口发起请求**---这种才是真正的混合场景，才真正符合企业产品实际情况
  + “假”混合场景：在一个线程组中，添加逻辑控制器，控制我们脚本的运行，这种，是把脚本混合了， 但是于生产的情况还是有差异。
  + 会用到前面讲的什么技术
    + 跨线程组传参
  + 线程组1  40
  + 线程组2  20
  + 线程组3  10 



在做性能测试时，不要连续去执行性能测试，在前一轮性能测试结束的时候，要休息一会，等待服务器的压力释放，再开始下一轮性能测试，不然，因为前面的性能测试导致服务器压力过大，未释放，从而影响后续性能测试结果。

+ 性能监控：
  + 性能测试工具：  用什么工具来做性能测试
  + 性能测试场景设计： 用什么方法模拟我们性能测试需求
  + 性能监控：监控我们性能测试过程，收集性能测试过程中数据，拥有性能分析----主要时收集被测服务器的资源使用情况
    + 被测服务器的资源：
      + 硬件资源： cpu、内存、io、网络
      + 软件资源：  tomcat、jvm、数据库、连接池、中间件....

监控：硬件资源， 第二步，再监控 软件资源

最简单，最容易上手的方式： 

​	nmon： 监控服务器硬件资源，这是一个独立的服务器资源监控工具

SeverAgent：  这个工具，可以和jmeter集成，在jmeter的GUI界面可以看到数据。

监控工具是监控被测服务器的，所以监控工具要安装在被测服务器上，

监控工具，本身也有资源消化，所以，选择监控工具，要尽可能选择资源消耗比较少的工具



把ServerAgent zip包上传到被测服务器，解压

unzip ServerAgent-2.2.3.zip

进入解压后的文件夹

./startAgent.sh   ----启动命令， 绑定的端口是 4444

这个端口，在云服务器中，可能不允许对外开放这个端口

4444这个端口，在阿里云服务器中，是不允许开放这个端口

 ./startAgent.sh --udp-port 0 --tcp-port 5689

--udp-port 0   意思是，关闭UDP数据传输方式

--tcp-port 自定义端口， 自定义一个开放tcp数据传输的端口

PerfMon Metrics Collector
一、虚拟环境
1.创建虚拟环境
方式一：
    a.直接使用Pycharm专业版本创建虚拟环境（virtualenv或者pipenv）
    b.不推荐

方式二：
    手动创建
    a.安装pipenv
        pip install -i https://pypi.douban.com/simple pipenv
    b.创建虚拟环境并进入到虚拟环境中
        pipenv shell
            1)如果当前路径下，没有虚拟环境，会自动创建，名称为：项目名-随机字符
            2)如果在当前路径下，已经创建了虚拟环境，会直接进入到已创建的虚拟环境中
    c.将解释器修改为虚拟环境中的解释器
        1)查看解释器的路径
            pipenv --venv
        2)修改解释器
            File -> settings -> project -> add -> ...


二、搭建django项目工程
1.修改pypi源（可选）
    Pipfile文件中url

2.下载django程序
    a.直接使用pycharm下载（File -> settings -> project -> +），推荐
    b.可以手动下载（打开Terminal -> pipenv shell进入到虚拟环境中 -> pip install django或者pipenv install django）

3.创建django项目工程
    a.进入到虚拟环境中(pipenv shell)
    b.django-admin startproject 项目名    在当前所在路径下再创建一个新的项目（嵌套三级），不用
    b.django-admin startproject 项目名 .  把当前所在路径当前项目根路径（嵌套二级），推荐
    c.项目名：一般与所在路径名一致

4.启动django项目
    a.进入到虚拟环境中(pipenv shell)
    b.python manage.py runserver
        默认监听127.0.0.1:8000
    c.python manage.py runserver ip:端口（如：python manage.py runserver 127.0.0.1:8888）
    d.Pycharm专业版，可以创建启动器（Add Configuration -> 点击+ -> 选择django server ->
        输入启动器名称 -> Fix -> 设置项目根路径和setting.py文件）

5.开启git版本管理
    a.Pycharm专业版可以打开vcs -> enable .... -> 选择git即可
    b.Pycharm社区版本可以打开terminal -> git init


三、提交版本
1.将某些文件不进行版本管理
    在项目根目录下创建.gitignore文件，将无需进行版本管理的文件或者文件夹添加至.gitignore文件中

2.将修改添加到暂存区
    git add .

3.将暂存区中的内容添加到本地仓库
    1）git commit -m "注释"
    2）git config --local user.name "用户名"
    3）git config --local user.email "xxx@qq.com"


四、django项目工程结构
1.与项目同名的包dev07
    __init__.py     为包文件
    asgi.py         用于启动ASGI协议应用服务器的入口文件，在异步项目部署时使用
    settings.py     用于存放django的全局配置信息
    urls.py         用于创建全局路由信息
    wsgi.py         用于启动WSGI协议应用服务器的入口文件，在部署时使用

2.项目根路径下的文件
    db.sqlite3      django项目自带的文本型数据库
    manage.py       用于管理django项目的命令行工具


五、子应用
1.意义
    1）解耦：将各功能模块保持独立
    2）复用：方便各功能模块进行复用


2.创建
    方式一：python manage.py startapp 子应用名称
    方式二：Tools -> Run manage.py Task（Pycharm专业版本）


3.注册
    1）在settings.py中INSTALLED_APPS列表进行注册，如果不注册，那么当前模块就不可用
    2）注册方法，有两种
        方式一：'子应用名'
        方式二：'子应用名.apps.子应用名首字母大写Config'


4.子应用结构
    migrations      用于存放迁移脚本
    __init__.py     为包文件
    admin.py        用于配置admin后台管理站点
    apps.py         用于配置子应用信息
    models.py       用于定义模型类
    tests.py        用于定义当前子应用的单元测试逻辑
    views.py        用于定义子应用的业务逻辑实现

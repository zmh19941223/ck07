前提：准备好用例数据

#  一、定义用例类

#  二、excel中读取用例数据

#  三、使用ddt通过数据去生成测试用例：

#  四、完善用例执行的逻辑
    1、准备用例数据

    2、进行测试（调用被测的函数，获取返回的实际结果）

    3、断言
        通过try来捕获断言异常去区分用例是否执行通过：

            断言不通过
                回写结果到excel
                记录日志

            断言通过：
                回写结果到excel
                记录日志

知识跳转：【记录日志】   ----->需要使用日志收集器（导入创建好的日志收集器）

    日志收集器的创建代码封装好在handle_log模块中 ：
        handle_log模块：
            1、去配置文件中读取日志相关的配置数据：【收集器名字、日志文件名、收集等级，输入到文件的等级，输入出到控制台的登录】
            2、根据读取出来的数据，调用创建日志收集器的方法创建一个日志收集器




知识跳转： 【创建日志收集器】------->需要使用配置文件解析器对象（导入handle_conf模块中的配置文件解析器对象）

    handle_conf中定义了一个Config类（继承于configParser）
    重写了configParser的__init__方法，
    在init方法中添加了调用read读取配置文件内容的操作













项目结构管理优化：
                     文件夹
用例数据文件     --->  datas
日志文件        --->  logs
测试报告        --->  reports
配置文件        --->  conf
测试用例模块     --->  testcases
  封装的公共模块 --->common
    封装的读取excel的模块
    封装的读取创建日志收集器的模块
    封装的读取配置文件的模块


项目运行启动模块   run.py(项目的启动文件一般是在项目的根目录下)






















